// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file vehicle_trajectory_waypoint_desiredSubscriber.cpp
 * This file contains the implementation of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/subscriber/Subscriber.h>
#include <fastrtps/attributes/SubscriberAttributes.h>

#include <fastrtps/Domain.h>

#include "vehicle_trajectory_waypoint_desiredSubscriber.h"

#include "ros/ros.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

vehicle_trajectory_waypoint_desiredSubscriber::vehicle_trajectory_waypoint_desiredSubscriber() : mp_participant(nullptr), mp_subscriber(nullptr) {}

vehicle_trajectory_waypoint_desiredSubscriber::~vehicle_trajectory_waypoint_desiredSubscriber() {	Domain::removeParticipant(mp_participant);}

bool vehicle_trajectory_waypoint_desiredSubscriber::init(const ros::NodeHandle& private_nh)
{
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.setName("Participant_subscriber"); //You can put the name you want
    mp_participant = Domain::createParticipant(PParam);
    if(mp_participant == nullptr)
    {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType*>(&myType));

    // Create Subscriber

    SubscriberAttributes Rparam;
    Rparam.topic.topicKind = NO_KEY;
    Rparam.topic.topicDataType = myType.getName(); //Must be registered before the creation of the subscriber
    Rparam.topic.topicName = "vehicle_trajectory_waypoint_desiredPubSubTopic";
    mp_subscriber = Domain::createSubscriber(mp_participant,Rparam, static_cast<SubscriberListener*>(&m_listener));
    if(mp_subscriber == nullptr)
    {
        return false;
    }

    m_listener.nh_ = private_nh;
    m_listener.vehicle_trajectory_waypoint_desired_publisher_ = m_listener.nh_.advertise<px4_msgs::VehicleTrajectoryWaypointDesired>("/px4_micrortps_ros/vehicle_trajectory_waypoint_desired/out", 10);

    return true;
}

void vehicle_trajectory_waypoint_desiredSubscriber::SubListener::onSubscriptionMatched(Subscriber* sub,MatchingInfo& info)
{
    (void)sub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "Subscriber matched" << std::endl;
    }
    else
    {
        n_matched--;
        std::cout << "Subscriber unmatched" << std::endl;
    }
}

void vehicle_trajectory_waypoint_desiredSubscriber::SubListener::onNewDataMessage(Subscriber* sub)
{
    // Take data
    vehicle_trajectory_waypoint_desired st;

    if(sub->takeNextData(&st, &m_info))
    {
        if(m_info.sampleKind == ALIVE)
        {
            px4_msgs::VehicleTrajectoryWaypointDesiredPtr msg_ptr(new px4_msgs::VehicleTrajectoryWaypointDesired);
            convertUORBToPX4Message(st, msg_ptr);
            vehicle_trajectory_waypoint_desired_publisher_.publish(msg_ptr);
        }
    }
}

void vehicle_trajectory_waypoint_desiredSubscriber::run()
{
    std::cout << "Waiting for Data, press Enter to stop the Subscriber. "<<std::endl;
    std::cin.ignore();
    std::cout << "Shutting down the Subscriber." << std::endl;
}

void vehicle_trajectory_waypoint_desiredSubscriber::SubListener::convertUORBToPX4Message(const vehicle_trajectory_waypoint_desired& uorb_msg, px4_msgs::VehicleTrajectoryWaypointDesiredPtr& px4_msg_ptr)
{
    px4_msg_ptr->timestamp = uorb_msg.timestamp_();

    ROS_INFO("timestamp: %llu   ", px4_msg_ptr->timestamp);

    for(int i = 0; i < uorb_msg.waypoints().size(); i++)
    {
        px4_msgs::TrajectoryWaypoint twp;

        twp.timestamp = uorb_msg.waypoints()[i].timestamp_();

        twp.position[0] = uorb_msg.waypoints()[i].position()[0];
        twp.position[1] = uorb_msg.waypoints()[i].position()[1];
        twp.position[2] = uorb_msg.waypoints()[i].position()[2];

        twp.velocity[0] = uorb_msg.waypoints()[i].velocity()[0];
        twp.velocity[1] = uorb_msg.waypoints()[i].velocity()[1];
        twp.velocity[2] = uorb_msg.waypoints()[i].velocity()[2];

        twp.acceleration[0] = uorb_msg.waypoints()[i].acceleration()[0];
        twp.acceleration[1] = uorb_msg.waypoints()[i].acceleration()[1];
        twp.acceleration[2] = uorb_msg.waypoints()[i].acceleration()[2];

        twp.yaw = uorb_msg.waypoints()[i].yaw_();
        twp.yaw_speed = uorb_msg.waypoints()[i].yaw_speed_();

        twp.point_valid = uorb_msg.waypoints()[i].point_valid_();
        twp.type = uorb_msg.waypoints()[i].type_();

        px4_msg_ptr->waypoints[i] = twp;
    }
}
