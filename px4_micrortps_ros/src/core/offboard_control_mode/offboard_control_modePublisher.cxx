// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file offboard_control_modePublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include "ros/ros.h"


#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/publisher/Publisher.h>
#include <fastrtps/attributes/PublisherAttributes.h>

#include <fastrtps/Domain.h>

#include <thread>
#include <chrono>

#include "offboard_control_modePublisher.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

offboard_control_modePublisher::offboard_control_modePublisher() : mp_participant(nullptr), mp_publisher(nullptr) {}

offboard_control_modePublisher::~offboard_control_modePublisher() {	Domain::removeParticipant(mp_participant);}

bool offboard_control_modePublisher::init()
{
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.setName("Participant_publisher");  //You can put here the name you want
    mp_participant = Domain::createParticipant(PParam);
    if(mp_participant == nullptr)
    {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType*>(&myType));

    // Create Publisher

    PublisherAttributes Wparam;
    Wparam.topic.topicKind = NO_KEY;
    Wparam.topic.topicDataType = myType.getName();  //This type MUST be registered
    Wparam.topic.topicName = "offboard_control_modePubSubTopic";

    mp_publisher = Domain::createPublisher(mp_participant,Wparam,static_cast<PublisherListener*>(&m_listener));

    if(mp_publisher == nullptr)
    {
        return false;
    }

    std::cout << "Publisher created, waiting for Subscribers." << std::endl;
    return true;
}

void offboard_control_modePublisher::PubListener::onPublicationMatched(Publisher* pub,MatchingInfo& info)
{
    (void)pub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "offboard control mode Publisher matched" << std::endl;
        timesync_sub_ = node_handle.subscribe<px4_msgs::Timesync>("/rtps_time_sync", 10, &offboard_control_modePublisher::PubListener::timesyncCallback, this);
    }
    else
    {
        n_matched--;
        std::cout << "offboard control mode Publisher unmatched" << std::endl;
    }
}

void offboard_control_modePublisher::PubListener::timesyncCallback(const  px4_msgs::TimesyncConstPtr&  msg)
{
	_timestamp = msg->timestamp;	
}

void offboard_control_modePublisher::run(const px4_msgs::OffboardControlMode& input)
{

    ROS_INFO("OffboardControlMode position: %i", input.position); 

    // Publication code
    offboard_control_mode st;

    st.timestamp_(input.timestamp);
    st.position_(input.position);
    st.velocity_(input.velocity);
    st.acceleration_(input.acceleration);
    st.attitude_(input.attitude);
    st.body_rate_(input.body_rate);
    mp_publisher->write(&st);

}
