// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file telemetry_statusPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/publisher/Publisher.h>
#include <fastrtps/attributes/PublisherAttributes.h>

#include <fastrtps/Domain.h>

#include <thread>
#include <chrono>

#include "telemetry_statusPublisher.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

telemetry_statusPublisher::telemetry_statusPublisher() : mp_participant(nullptr), mp_publisher(nullptr) {}

telemetry_statusPublisher::~telemetry_statusPublisher() {	Domain::removeParticipant(mp_participant);}

bool telemetry_statusPublisher::init()
{
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.setName("Participant_publisher");  //You can put here the name you want
    mp_participant = Domain::createParticipant(PParam);
    if(mp_participant == nullptr)
    {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType*>(&myType));

    // Create Publisher

    PublisherAttributes Wparam;
    Wparam.topic.topicKind = NO_KEY;
    Wparam.topic.topicDataType = myType.getName();  //This type MUST be registered
    Wparam.topic.topicName = "telemetry_statusPubSubTopic";

    mp_publisher = Domain::createPublisher(mp_participant,Wparam,static_cast<PublisherListener*>(&m_listener));

    if(mp_publisher == nullptr)
    {
        return false;
    }

    std::cout << "Publisher created, waiting for Subscribers." << std::endl;
    return true;
}

void telemetry_statusPublisher::PubListener::onPublicationMatched(Publisher* pub,MatchingInfo& info)
{
    (void)pub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "Publisher matched" << std::endl;
    }
    else
    {
        n_matched--;
        std::cout << "Publisher unmatched" << std::endl;
    }
}

void telemetry_statusPublisher::run(const px4_msgs::TelemetryStatus& input)
{
    telemetry_status st;

    st.timestamp_(input.timestamp);        
    
    st.type_(input.type);

    st.mode_(input.mode);

    st.flow_control_(input.flow_control);

    st.forwarding_(input.forwarding);

    st.mavlink_v2_(input.mavlink_v2);

    st.ftp_(input.ftp);

    st.streams_(input.streams);

    st.data_rate_(input.data_rate);

    st.rate_multiplier_(input.rate_multiplier);

    st.tx_rate_avg_(input.tx_rate_avg);

    st.tx_error_rate_avg_(input.tx_error_rate_avg);

    st.tx_message_count_(input.tx_message_count);

    st.tx_buffer_overruns_(input.tx_buffer_overruns);

    st.rx_rate_avg_(input.rx_rate_avg);
    st.rx_message_count_(input.rx_message_count);
    st.rx_message_lost_count_(input.rx_message_lost_count);
    st.rx_buffer_overruns_(input.rx_buffer_overruns);
    st.rx_parse_errors_(input.rx_parse_errors);
    st.rx_packet_drop_count_(input.rx_packet_drop_count);
    st.rx_message_lost_rate_(input.rx_message_lost_rate);

    st.heartbeat_type_antenna_tracker_(input.heartbeat_type_antenna_tracker);
    st.heartbeat_type_gcs_(input.heartbeat_type_gcs);
    st.heartbeat_type_onboard_controller_(input.heartbeat_type_onboard_controller);
    st.heartbeat_type_gimbal_(input.heartbeat_type_gimbal);
    st.heartbeat_type_adsb_(input.heartbeat_type_adsb);
    st.heartbeat_type_camera_(input.heartbeat_type_camera);

    //TODO does not exist in the PX4 1.12.3 version
    //st.heartbeat_type_parachute_(input.heartbeat_type_parachute);

    st.heartbeat_component_telemetry_radio_(input.heartbeat_component_telemetry_radio);
    st.heartbeat_component_log_(input.heartbeat_component_log);
    st.heartbeat_component_osd_(input.heartbeat_component_osd);
    st.heartbeat_component_obstacle_avoidance_(input.heartbeat_component_obstacle_avoidance);
    st.heartbeat_component_vio_(input.heartbeat_component_vio);
    st.heartbeat_component_pairing_manager_(input.heartbeat_component_pairing_manager);
    st.heartbeat_component_udp_bridge_(input.heartbeat_component_udp_bridge);
    st.heartbeat_component_uart_bridge_(input.heartbeat_component_uart_bridge);


    mp_publisher->write(&st);
}
