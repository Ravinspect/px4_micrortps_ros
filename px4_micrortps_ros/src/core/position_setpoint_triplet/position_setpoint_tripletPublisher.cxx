// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file position_setpoint_tripletPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/publisher/Publisher.h>
#include <fastrtps/attributes/PublisherAttributes.h>

#include <fastrtps/Domain.h>

#include <thread>
#include <chrono>

#include "position_setpoint_tripletPublisher.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

position_setpoint_tripletPublisher::position_setpoint_tripletPublisher() : mp_participant(nullptr), mp_publisher(nullptr) {}

position_setpoint_tripletPublisher::~position_setpoint_tripletPublisher() {	Domain::removeParticipant(mp_participant);}

bool position_setpoint_tripletPublisher::init()
{
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.setName("Participant_publisher");  //You can put here the name you want
    mp_participant = Domain::createParticipant(PParam);
    if(mp_participant == nullptr)
    {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType*>(&myType));

    // Create Publisher

    PublisherAttributes Wparam;
    Wparam.topic.topicKind = NO_KEY;
    Wparam.topic.topicDataType = myType.getName();  //This type MUST be registered
    Wparam.topic.topicName = "position_setpoint_tripletPubSubTopic";

    mp_publisher = Domain::createPublisher(mp_participant,Wparam,static_cast<PublisherListener*>(&m_listener));

    if(mp_publisher == nullptr)
    {
        return false;
    }

    std::cout << "Publisher created, waiting for Subscribers." << std::endl;
    return true;
}

void position_setpoint_tripletPublisher::PubListener::onPublicationMatched(Publisher* pub,MatchingInfo& info)
{
    (void)pub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "Publisher matched" << std::endl;
    }
    else
    {
        n_matched--;
        std::cout << "Publisher unmatched" << std::endl;
    }
}

void position_setpoint_tripletPublisher::run(const px4_msgs::PositionSetpointTriplet& input)
{
    position_setpoint_triplet st;

    st.timestamp_(input.timestamp);        

    //previous
    px4_msgs::PositionSetpoint previous = input.previous;
    position_setpoint st_previous;
    st_previous.timestamp_(previous.timestamp);
    st_previous.valid_(previous.valid);
    st_previous.type_(previous.type);

    st_previous.vx_(previous.vx);
    st_previous.vy_(previous.vy);
    st_previous.vz_(previous.vz);

    st_previous.velocity_valid_(previous.velocity_valid);
    st_previous.velocity_frame_(previous.velocity_frame);
    st_previous.alt_valid_(previous.alt_valid);

    st_previous.lat_(previous.lat);
    st_previous.lon_(previous.lon);
    st_previous.alt_(previous.alt);
    st_previous.yaw_(previous.yaw);
    st_previous.yaw_valid_(previous.yaw_valid);

    st_previous.yawspeed_(previous.yawspeed);
    st_previous.yawspeed_valid_(previous.yawspeed_valid);

    st_previous.landing_gear_(previous.landing_gear);

    st_previous.loiter_radius_(previous.loiter_radius);

    st_previous.loiter_direction_(previous.loiter_direction);

    st_previous.acceptance_radius_(previous.acceptance_radius);

    st_previous.cruising_speed_(previous.cruising_speed);

    st_previous.cruising_throttle_(previous.cruising_throttle);

    st_previous.disable_weather_vane_(previous.disable_weather_vane);

    st.previous_(st_previous);


    //current
    px4_msgs::PositionSetpoint current = input.current;
    position_setpoint st_current;
    st_current.timestamp_(current.timestamp);
    st_current.valid_(current.valid);
    st_current.type_(current.type);

    st_current.vx_(current.vx);
    st_current.vy_(current.vy);
    st_current.vz_(current.vz);

    st_current.velocity_valid_(current.velocity_valid);
    st_current.velocity_frame_(current.velocity_frame);
    st_current.alt_valid_(current.alt_valid);

    st_current.lat_(current.lat);
    st_current.lon_(current.lon);
    st_current.alt_(current.alt);
    st_current.yaw_(current.yaw);
    st_current.yaw_valid_(current.yaw_valid);

    st_current.yawspeed_(current.yawspeed);
    st_current.yawspeed_valid_(current.yawspeed_valid);

    st_current.landing_gear_(current.landing_gear);

    st_current.loiter_radius_(current.loiter_radius);

    st_current.loiter_direction_(current.loiter_direction);

    st_current.acceptance_radius_(current.acceptance_radius);

    st_current.cruising_speed_(current.cruising_speed);

    st_current.cruising_throttle_(current.cruising_throttle);

    st_current.disable_weather_vane_(current.disable_weather_vane);

    st.current_(st_current);

    //next
    px4_msgs::PositionSetpoint next = input.next;
    position_setpoint st_next;
    st_next.timestamp_(next.timestamp);
    st_next.valid_(next.valid);
    st_next.type_(next.type);

    st_next.vx_(next.vx);
    st_next.vy_(next.vy);
    st_next.vz_(next.vz);

    st_next.velocity_valid_(next.velocity_valid);
    st_next.velocity_frame_(next.velocity_frame);
    st_next.alt_valid_(next.alt_valid);

    st_next.lat_(next.lat);
    st_next.lon_(next.lon);
    st_next.alt_(next.alt);
    st_next.yaw_(next.yaw);
    st_next.yaw_valid_(next.yaw_valid);

    st_next.yawspeed_(next.yawspeed);
    st_next.yawspeed_valid_(next.yawspeed_valid);

    st_next.landing_gear_(next.landing_gear);

    st_next.loiter_radius_(next.loiter_radius);

    st_next.loiter_direction_(next.loiter_direction);

    st_next.acceptance_radius_(next.acceptance_radius);

    st_next.cruising_speed_(next.cruising_speed);

    st_next.cruising_throttle_(next.cruising_throttle);

    st_next.disable_weather_vane_(next.disable_weather_vane);

    st.next_(st_next);



    mp_publisher->write(&st);
}
