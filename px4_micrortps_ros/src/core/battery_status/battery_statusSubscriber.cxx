// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file battery_statusSubscriber.cpp
 * This file contains the implementation of the subscriber functions.
 *
 * This file was generated by the tool fastcdrgen.
 */

#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/subscriber/Subscriber.h>
#include <fastrtps/attributes/SubscriberAttributes.h>

#include <fastrtps/Domain.h>

#include "battery_statusSubscriber.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

battery_statusSubscriber::battery_statusSubscriber() : mp_participant(nullptr), mp_subscriber(nullptr) {}

battery_statusSubscriber::~battery_statusSubscriber() {	Domain::removeParticipant(mp_participant);}

bool battery_statusSubscriber::init(const ros::NodeHandle& private_nh)
{
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.setName("Participant_subscriber"); //You can put the name you want
    mp_participant = Domain::createParticipant(PParam);
    if(mp_participant == nullptr)
    {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType*>(&myType));

    // Create Subscriber

    SubscriberAttributes Rparam;
    Rparam.topic.topicKind = NO_KEY;
    Rparam.topic.topicDataType = myType.getName(); //Must be registered before the creation of the subscriber
    Rparam.topic.topicName = "battery_statusPubSubTopic";
    mp_subscriber = Domain::createSubscriber(mp_participant,Rparam, static_cast<SubscriberListener*>(&m_listener));
    if(mp_subscriber == nullptr)
    {
        return false;
    }

    m_listener.nh_ = private_nh;
    m_listener.battery_status_publisher_ = m_listener.nh_.advertise<px4_msgs::BatteryStatus>("/px4_micrortps_ros/battery_status/out", 10);

    return true;
}

void battery_statusSubscriber::SubListener::onSubscriptionMatched(Subscriber* sub,MatchingInfo& info)
{
    (void)sub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "Subscriber battery_status matched" << std::endl;
    }
    else
    {
        n_matched--;
        std::cout << "Subscriber battery_status unmatched" << std::endl;
    }
}

void battery_statusSubscriber::SubListener::onNewDataMessage(Subscriber* sub)
{
    // Take data
    battery_status st;

    if(sub->takeNextData(&st, &m_info))
    {
        if(m_info.sampleKind == ALIVE)
        {
            px4_msgs::BatteryStatusPtr battery_status_msg(new px4_msgs::BatteryStatus);
            convertUORBToPX4Message(st, battery_status_msg); 

            battery_status_publisher_.publish(battery_status_msg);
        }
    }
}

void battery_statusSubscriber::run()
{
    std::cout << "Waiting for Data, press Enter to stop the Subscriber. "<<std::endl;
    std::cin.ignore();
    std::cout << "Shutting down the Subscriber." << std::endl;
}

void battery_statusSubscriber::SubListener::convertUORBToPX4Message(const battery_status& st, px4_msgs::BatteryStatusPtr& px4_msg_ptr)
{
    px4_msg_ptr->timestamp = st.timestamp_();
    px4_msg_ptr->connected = st.connected_();
    px4_msg_ptr->voltage_v = st.voltage_v_();
    px4_msg_ptr->voltage_filtered_v = st.voltage_filtered_v_();
    px4_msg_ptr->current_a = st.current_a_();
    px4_msg_ptr->current_filtered_a = st.current_filtered_a_();
    px4_msg_ptr->current_average_a = st.current_average_a_();
    px4_msg_ptr->discharged_mah = st.discharged_mah_();
    px4_msg_ptr->remaining = st.remaining_();
    px4_msg_ptr->scale = st.scale_();
    //TODO time_remaining_s field is not in v1.12.3 version
    //px4_msg_ptr->time_remaining_s = st.time_remaining_s_();
    px4_msg_ptr->temperature = st.temperature_();
    px4_msg_ptr->cell_count = st.cell_count_();

    px4_msg_ptr->source = st.source_();
    px4_msg_ptr->priority = st.priority_();
    px4_msg_ptr->capacity = st.capacity_();
    px4_msg_ptr->cycle_count = st.cycle_count_();
    px4_msg_ptr->average_time_to_empty = st.average_time_to_empty_();
    px4_msg_ptr->serial_number = st.serial_number_();
    px4_msg_ptr->manufacture_date = st.manufacture_date_();
    px4_msg_ptr->state_of_health = st.state_of_health_();
    px4_msg_ptr->max_error = st.max_error_();
    px4_msg_ptr->id = st.id_();
    px4_msg_ptr->interface_error = st.interface_error_();

    // TODO will be implemented
    // float32[14] voltage_cell_v		# Battery individual cell voltages, 0 if unknown
    // float32 max_cell_voltage_delta	# Max difference between individual cell voltages

    px4_msg_ptr->is_powering_off = st.is_powering_off_();
    
    //TODO is_required field is not in v1.12.3 version
    //px4_msg_ptr->is_required = st.is_required_();

    //TODO there is no "faults" and "custom_faults" in v1.12.3 fastrtps-gen generated codes
    //px4_msg_ptr->faults = st.faults_();
    //px4_msg_ptr->custom_faults = st.custom_faults_();


    px4_msg_ptr->warning = st.warning_();
    
    //TODO there is no "mode" in v1.12.3 fastrtps-gen generated codes
    //px4_msg_ptr->mode = st.mode_();

    px4_msg_ptr->average_power = st.average_power_();
    px4_msg_ptr->available_energy = st.available_energy_();

    //TODO full_charge_capacity_wh and remaining_capacity_wh
    //px4_msg_ptr->full_charge_capacity_wh = st.full_charge_capacity_wh_();
    // px4_msg_ptr->remaining_capacity_wh = st.remaining_capacity_wh_();
    px4_msg_ptr->design_capacity = st.design_capacity_();
    px4_msg_ptr->average_time_to_full = st.average_time_to_full_();
    px4_msg_ptr->over_discharge_count = st.over_discharge_count_();
    px4_msg_ptr->nominal_voltage = st.nominal_voltage_();
}