// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file vehicle_visual_odometryPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/publisher/Publisher.h>
#include <fastrtps/attributes/PublisherAttributes.h>

#include <fastrtps/Domain.h>

#include <thread>
#include <chrono>

#include "vehicle_visual_odometryPublisher.h"
#include <ros/ros.h>

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

vehicle_visual_odometryPublisher::vehicle_visual_odometryPublisher() : mp_participant(nullptr), mp_publisher(nullptr) {}

vehicle_visual_odometryPublisher::~vehicle_visual_odometryPublisher() {	Domain::removeParticipant(mp_participant);}

bool vehicle_visual_odometryPublisher::init()
{
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.setName("Participant_publisher");  //You can put here the name you want
    mp_participant = Domain::createParticipant(PParam);
    if(mp_participant == nullptr)
    {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType*>(&myType));

    // Create Publisher

    PublisherAttributes Wparam;
    Wparam.topic.topicKind = NO_KEY;
    Wparam.topic.topicDataType = myType.getName();  //This type MUST be registered
    Wparam.topic.topicName = "vehicle_visual_odometryPubSubTopic";

    mp_publisher = Domain::createPublisher(mp_participant,Wparam,static_cast<PublisherListener*>(&m_listener));

    if(mp_publisher == nullptr)
    {
        return false;
    }

    std::cout << "Publisher created, waiting for Subscribers." << std::endl;
    return true;
}

void vehicle_visual_odometryPublisher::PubListener::onPublicationMatched(Publisher* pub,MatchingInfo& info)
{
    (void)pub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "Publisher matched" << std::endl;
    }
    else
    {
        n_matched--;
        std::cout << "Publisher unmatched" << std::endl;
    }
}

void vehicle_visual_odometryPublisher::run(const px4_msgs::VehicleVisualOdometry& input)
{
    // Publication code
    vehicle_visual_odometry st;

    st.timestamp_(input.timestamp);
    st.timestamp_sample_(input.timestamp_sample);

    st.local_frame_(input.local_frame);

    st.x_(input.x);
    st.y_(input.y);
    st.z_(input.z);

    std::array<float, 4> q = {input.q[0], input.q[1], input.q[2], input.q[3]};
    st.q(q);

    std::array<float, 4> q_offset = {input.q_offset[0], input.q_offset[1], input.q_offset[2], input.q_offset[3]};
    st.q_offset(q_offset);
    
    std::array<float, 21> pose_covariance = {input.pose_covariance[0], input.pose_covariance[1], input.pose_covariance[2], input.pose_covariance[3], input.pose_covariance[4], input.pose_covariance[5], input.pose_covariance[6], input.pose_covariance[7], input.pose_covariance[8], input.pose_covariance[9], input.pose_covariance[10], input.pose_covariance[11], input.pose_covariance[12], input.pose_covariance[13], input.pose_covariance[14], input.pose_covariance[15], input.pose_covariance[16], input.pose_covariance[17], input.pose_covariance[18], input.pose_covariance[19], input.pose_covariance[20]};
    st.pose_covariance(pose_covariance);

    st.velocity_frame_(input.velocity_frame);

    st.vx_(input.vx);
    st.vy_(input.vy);
    st.vz_(input.vz);

    st.rollspeed_(input.rollspeed);
    st.pitchspeed_(input.pitchspeed);
    st.yawspeed_(input.yawspeed);

    std::array<float, 21> velocity_covariance = {input.velocity_covariance[0], input.velocity_covariance[1], input.velocity_covariance[2], input.velocity_covariance[3], input.velocity_covariance[4], input.velocity_covariance[5], input.velocity_covariance[6], input.velocity_covariance[7], input.velocity_covariance[8], input.velocity_covariance[9], input.velocity_covariance[10], input.velocity_covariance[11], input.velocity_covariance[12], input.velocity_covariance[13], input.velocity_covariance[14], input.velocity_covariance[15], input.velocity_covariance[16], input.velocity_covariance[17], input.velocity_covariance[18], input.velocity_covariance[19], input.velocity_covariance[20]};
    st.velocity_covariance(velocity_covariance);

    //TODO does not exist in PX4 v1.12.3
    //st.reset_counter_(input.reset_counter);

    mp_publisher->write(&st);
}
