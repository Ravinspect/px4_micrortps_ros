// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file trajectory_setpointPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/publisher/Publisher.h>
#include <fastrtps/attributes/PublisherAttributes.h>

#include <fastrtps/Domain.h>

#include <thread>
#include <chrono>

#include "trajectory_setpointPublisher.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

trajectory_setpointPublisher::trajectory_setpointPublisher() : mp_participant(nullptr), mp_publisher(nullptr) {}

trajectory_setpointPublisher::~trajectory_setpointPublisher() {	Domain::removeParticipant(mp_participant);}

bool trajectory_setpointPublisher::init()
{
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.setName("Participant_publisher");  //You can put here the name you want
    mp_participant = Domain::createParticipant(PParam);
    if(mp_participant == nullptr)
    {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType*>(&myType));

    // Create Publisher

    PublisherAttributes Wparam;
    Wparam.topic.topicKind = NO_KEY;
    Wparam.topic.topicDataType = myType.getName();  //This type MUST be registered
    Wparam.topic.topicName = "trajectory_setpointPubSubTopic";

    mp_publisher = Domain::createPublisher(mp_participant,Wparam,static_cast<PublisherListener*>(&m_listener));

    if(mp_publisher == nullptr)
    {
        return false;
    }

    std::cout << "Publisher created, waiting for Subscribers." << std::endl;
    return true;
}

void trajectory_setpointPublisher::PubListener::onPublicationMatched(Publisher* pub,MatchingInfo& info)
{
    (void)pub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "Publisher matched" << std::endl;
    }
    else
    {
        n_matched--;
        std::cout << "Publisher unmatched" << std::endl;
    }
}

void trajectory_setpointPublisher::run(const px4_msgs::TrajectorySetpoint& input)
{
        // Publication code
    trajectory_setpoint st;

    st.timestamp_(input.timestamp);

    st.x_(input.x);
    st.y_(input.y);
    st.z_(input.z);

    st.vx_(input.vx);
    st.vy_(input.vy);
    st.vz_(input.vz);

    //TODO does not exist in px4 v1.12.3
    // std::array<float, 3> &_position = {input.position[0], input.position[1], input.position[2]};
    // st.position(_position);

    //TODO does not exist in px4 v1.12.3
    // std::array<float, 3> &_velocity = {input.velocity[0], input.velocity[1], input.velocity[2]};
    // st.velocity(_velocity);

    //std::array<float, 3> &_acceleration = {input.acceleration[0], input.acceleration[1], input.acceleration[2]};
    //TODO check this setter is valid or Is it fill this variables, Maybe change the setting type for array coming from px4 msgs.
    st.acceleration()[0] = input.acceleration[0];
    st.acceleration()[1] = input.acceleration[1];
    st.acceleration()[2] = input.acceleration[2];

    //TODO check this setter is valid or Is it fill this variables, Maybe change the setting type for array coming from px4 msgs.
    st.jerk()[0] = input.jerk[0];
    st.jerk()[1] = input.jerk[1];
    st.jerk()[2] = input.jerk[2];

    //TODO check this setter is valid or Is it fill this variables, Maybe change the setting type for array coming from px4 msgs.
    st.thrust()[0] = input.thrust[0];
    st.thrust()[1] = input.thrust[1];
    st.thrust()[2] = input.thrust[2];

    st.yaw_(input.yaw);
    st.yawspeed_(input.yawspeed);
    mp_publisher->write(&st);
}
