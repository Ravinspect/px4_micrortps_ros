// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file debug_arrayPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/publisher/Publisher.h>
#include <fastrtps/attributes/PublisherAttributes.h>

#include <fastrtps/Domain.h>

#include <thread>
#include <chrono>

#include "debug_arrayPublisher.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

debug_arrayPublisher::debug_arrayPublisher() : mp_participant(nullptr), mp_publisher(nullptr) {}

debug_arrayPublisher::~debug_arrayPublisher() {	Domain::removeParticipant(mp_participant);}

bool debug_arrayPublisher::init()
{
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.setName("Participant_publisher");  //You can put here the name you want
    mp_participant = Domain::createParticipant(PParam);
    if(mp_participant == nullptr)
    {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType*>(&myType));

    // Create Publisher

    PublisherAttributes Wparam;
    Wparam.topic.topicKind = NO_KEY;
    Wparam.topic.topicDataType = myType.getName();  //This type MUST be registered
    Wparam.topic.topicName = "debug_arrayPubSubTopic";

    mp_publisher = Domain::createPublisher(mp_participant,Wparam,static_cast<PublisherListener*>(&m_listener));

    if(mp_publisher == nullptr)
    {
        return false;
    }

    std::cout << "Publisher created, waiting for Subscribers." << std::endl;
    return true;
}

void debug_arrayPublisher::PubListener::onPublicationMatched(Publisher* pub,MatchingInfo& info)
{
    (void)pub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "debug array Publisher matched" << std::endl;
    }
    else
    {
        n_matched--;
        std::cout << "debug array Publisher unmatched" << std::endl;
    }
}

void debug_arrayPublisher::run(const px4_msgs::DebugArray& input)
{
    debug_array st;

    st.timestamp_(input.timestamp);

    st.id_(input.id);

    std::array<char, 10> name = { input.name[0], input.name[1], input.name[2], input.name[3], input.name[4], input.name[5], input.name[6], input.name[7], input.name[8], input.name[9] };
    st.name(name);

    std::array<float, 58> data = { input.data[0], input.data[1], input.data[2], input.data[3], input.data[4], input.data[5], input.data[6], input.data[7], input.data[8], input.data[9], input.data[10], input.data[11], input.data[12], input.data[13], input.data[14], input.data[15], input.data[16], input.data[17], input.data[18], input.data[19], input.data[20], input.data[21], input.data[22], input.data[23], input.data[24], input.data[25], input.data[26], input.data[27], input.data[28], input.data[29], input.data[30], input.data[31], input.data[32], input.data[33], input.data[34], input.data[35], input.data[36], input.data[37], input.data[38], input.data[39], input.data[40], input.data[41], input.data[42], input.data[43], input.data[44], input.data[45], input.data[46], input.data[47], input.data[48], input.data[49], input.data[50], input.data[51], input.data[52], input.data[53], input.data[54], input.data[55], input.data[56], input.data[57] };
    st.data(data);

    mp_publisher->write(&st);
}
