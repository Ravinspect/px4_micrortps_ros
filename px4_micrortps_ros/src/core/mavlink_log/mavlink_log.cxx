// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file mavlink_log.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "mavlink_log.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>



mavlink_log::mavlink_log()
{
    // m_timestamp_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@2f490758
    m_timestamp_ = 0;
    // m_text com.eprosima.idl.parser.typecode.AliasTypeCode@101df177
    memset(&m_text, 0, (127) * 1);
    // m_severity_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@166fa74d
    m_severity_ = 0;

}

mavlink_log::~mavlink_log()
{



}

mavlink_log::mavlink_log(const mavlink_log &x)
{
    m_timestamp_ = x.m_timestamp_;
    m_text = x.m_text;
    m_severity_ = x.m_severity_;
}

mavlink_log::mavlink_log(mavlink_log &&x)
{
    m_timestamp_ = x.m_timestamp_;
    m_text = std::move(x.m_text);
    m_severity_ = x.m_severity_;
}

mavlink_log& mavlink_log::operator=(const mavlink_log &x)
{

    m_timestamp_ = x.m_timestamp_;
    m_text = x.m_text;
    m_severity_ = x.m_severity_;

    return *this;
}

mavlink_log& mavlink_log::operator=(mavlink_log &&x)
{

    m_timestamp_ = x.m_timestamp_;
    m_text = std::move(x.m_text);
    m_severity_ = x.m_severity_;

    return *this;
}

size_t mavlink_log::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((127) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t mavlink_log::getCdrSerializedSize(const mavlink_log& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    if ((127) > 0)
    {
        current_alignment += ((127) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);
    }

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void mavlink_log::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp_;
    scdr << m_text;

    scdr << m_severity_;
}

void mavlink_log::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp_;
    dcdr >> m_text;

    dcdr >> m_severity_;
}

/*!
 * @brief This function sets a value in member timestamp_
 * @param _timestamp_ New value for member timestamp_
 */
void mavlink_log::timestamp_(uint64_t _timestamp_)
{
m_timestamp_ = _timestamp_;
}

/*!
 * @brief This function returns the value of member timestamp_
 * @return Value of member timestamp_
 */
uint64_t mavlink_log::timestamp_() const
{
    return m_timestamp_;
}

/*!
 * @brief This function returns a reference to member timestamp_
 * @return Reference to member timestamp_
 */
uint64_t& mavlink_log::timestamp_()
{
    return m_timestamp_;
}

/*!
 * @brief This function copies the value in member text
 * @param _text New value to be copied in member text
 */
void mavlink_log::text(const mavlink_log__char_array_127 &_text)
{
m_text = _text;
}

/*!
 * @brief This function moves the value in member text
 * @param _text New value to be moved in member text
 */
void mavlink_log::text(mavlink_log__char_array_127 &&_text)
{
m_text = std::move(_text);
}

/*!
 * @brief This function returns a constant reference to member text
 * @return Constant reference to member text
 */
const mavlink_log__char_array_127& mavlink_log::text() const
{
    return m_text;
}

/*!
 * @brief This function returns a reference to member text
 * @return Reference to member text
 */
mavlink_log__char_array_127& mavlink_log::text()
{
    return m_text;
}
/*!
 * @brief This function sets a value in member severity_
 * @param _severity_ New value for member severity_
 */
void mavlink_log::severity_(uint8_t _severity_)
{
m_severity_ = _severity_;
}

/*!
 * @brief This function returns the value of member severity_
 * @return Value of member severity_
 */
uint8_t mavlink_log::severity_() const
{
    return m_severity_;
}

/*!
 * @brief This function returns a reference to member severity_
 * @return Reference to member severity_
 */
uint8_t& mavlink_log::severity_()
{
    return m_severity_;
}


size_t mavlink_log::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;






    return current_align;
}

bool mavlink_log::isKeyDefined()
{
   return false;
}

void mavlink_log::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
}
