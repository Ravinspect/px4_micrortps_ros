// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file vehicle_land_detected.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "vehicle_land_detected.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

vehicle_land_detected::vehicle_land_detected()
{
    // m_timestamp_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@eafc191
    m_timestamp_ = 0;
    // m_alt_max_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@612fc6eb
    m_alt_max_ = 0.0;
    // m_freefall_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@1060b431
    m_freefall_ = false;
    // m_ground_contact_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@612679d6
    m_ground_contact_ = false;
    // m_maybe_landed_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@74ad1f1f
    m_maybe_landed_ = false;
    // m_landed_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@6a1aab78
    m_landed_ = false;
    // m_in_ground_effect_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@462d5aee
    m_in_ground_effect_ = false;
    // m_in_descend_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@69b0fd6f
    m_in_descend_ = false;
    // m_has_low_throttle_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@757942a1
    m_has_low_throttle_ = false;
    // m_vertical_movement_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@4a87761d
    m_vertical_movement_ = false;
    // m_horizontal_movement_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@66d1af89
    m_horizontal_movement_ = false;
    // m_close_to_ground_or_skipped_check_ com.eprosima.idl.parser.typecode.PrimitiveTypeCode@8646db9
    m_close_to_ground_or_skipped_check_ = false;

}

vehicle_land_detected::~vehicle_land_detected()
{












}

vehicle_land_detected::vehicle_land_detected(const vehicle_land_detected &x)
{
    m_timestamp_ = x.m_timestamp_;
    m_alt_max_ = x.m_alt_max_;
    m_freefall_ = x.m_freefall_;
    m_ground_contact_ = x.m_ground_contact_;
    m_maybe_landed_ = x.m_maybe_landed_;
    m_landed_ = x.m_landed_;
    m_in_ground_effect_ = x.m_in_ground_effect_;
    m_in_descend_ = x.m_in_descend_;
    m_has_low_throttle_ = x.m_has_low_throttle_;
    m_vertical_movement_ = x.m_vertical_movement_;
    m_horizontal_movement_ = x.m_horizontal_movement_;
    m_close_to_ground_or_skipped_check_ = x.m_close_to_ground_or_skipped_check_;
}

vehicle_land_detected::vehicle_land_detected(vehicle_land_detected &&x)
{
    m_timestamp_ = x.m_timestamp_;
    m_alt_max_ = x.m_alt_max_;
    m_freefall_ = x.m_freefall_;
    m_ground_contact_ = x.m_ground_contact_;
    m_maybe_landed_ = x.m_maybe_landed_;
    m_landed_ = x.m_landed_;
    m_in_ground_effect_ = x.m_in_ground_effect_;
    m_in_descend_ = x.m_in_descend_;
    m_has_low_throttle_ = x.m_has_low_throttle_;
    m_vertical_movement_ = x.m_vertical_movement_;
    m_horizontal_movement_ = x.m_horizontal_movement_;
    m_close_to_ground_or_skipped_check_ = x.m_close_to_ground_or_skipped_check_;
}

vehicle_land_detected& vehicle_land_detected::operator=(const vehicle_land_detected &x)
{

    m_timestamp_ = x.m_timestamp_;
    m_alt_max_ = x.m_alt_max_;
    m_freefall_ = x.m_freefall_;
    m_ground_contact_ = x.m_ground_contact_;
    m_maybe_landed_ = x.m_maybe_landed_;
    m_landed_ = x.m_landed_;
    m_in_ground_effect_ = x.m_in_ground_effect_;
    m_in_descend_ = x.m_in_descend_;
    m_has_low_throttle_ = x.m_has_low_throttle_;
    m_vertical_movement_ = x.m_vertical_movement_;
    m_horizontal_movement_ = x.m_horizontal_movement_;
    m_close_to_ground_or_skipped_check_ = x.m_close_to_ground_or_skipped_check_;

    return *this;
}

vehicle_land_detected& vehicle_land_detected::operator=(vehicle_land_detected &&x)
{

    m_timestamp_ = x.m_timestamp_;
    m_alt_max_ = x.m_alt_max_;
    m_freefall_ = x.m_freefall_;
    m_ground_contact_ = x.m_ground_contact_;
    m_maybe_landed_ = x.m_maybe_landed_;
    m_landed_ = x.m_landed_;
    m_in_ground_effect_ = x.m_in_ground_effect_;
    m_in_descend_ = x.m_in_descend_;
    m_has_low_throttle_ = x.m_has_low_throttle_;
    m_vertical_movement_ = x.m_vertical_movement_;
    m_horizontal_movement_ = x.m_horizontal_movement_;
    m_close_to_ground_or_skipped_check_ = x.m_close_to_ground_or_skipped_check_;

    return *this;
}

size_t vehicle_land_detected::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t vehicle_land_detected::getCdrSerializedSize(const vehicle_land_detected& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void vehicle_land_detected::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_timestamp_;
    scdr << m_alt_max_;
    scdr << m_freefall_;
    scdr << m_ground_contact_;
    scdr << m_maybe_landed_;
    scdr << m_landed_;
    scdr << m_in_ground_effect_;
    scdr << m_in_descend_;
    scdr << m_has_low_throttle_;
    scdr << m_vertical_movement_;
    scdr << m_horizontal_movement_;
    scdr << m_close_to_ground_or_skipped_check_;
}

void vehicle_land_detected::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_timestamp_;
    dcdr >> m_alt_max_;
    dcdr >> m_freefall_;
    dcdr >> m_ground_contact_;
    dcdr >> m_maybe_landed_;
    dcdr >> m_landed_;
    dcdr >> m_in_ground_effect_;
    dcdr >> m_in_descend_;
    dcdr >> m_has_low_throttle_;
    dcdr >> m_vertical_movement_;
    dcdr >> m_horizontal_movement_;
    dcdr >> m_close_to_ground_or_skipped_check_;
}

/*!
 * @brief This function sets a value in member timestamp_
 * @param _timestamp_ New value for member timestamp_
 */
void vehicle_land_detected::timestamp_(uint64_t _timestamp_)
{
m_timestamp_ = _timestamp_;
}

/*!
 * @brief This function returns the value of member timestamp_
 * @return Value of member timestamp_
 */
uint64_t vehicle_land_detected::timestamp_() const
{
    return m_timestamp_;
}

/*!
 * @brief This function returns a reference to member timestamp_
 * @return Reference to member timestamp_
 */
uint64_t& vehicle_land_detected::timestamp_()
{
    return m_timestamp_;
}

/*!
 * @brief This function sets a value in member alt_max_
 * @param _alt_max_ New value for member alt_max_
 */
void vehicle_land_detected::alt_max_(float _alt_max_)
{
m_alt_max_ = _alt_max_;
}

/*!
 * @brief This function returns the value of member alt_max_
 * @return Value of member alt_max_
 */
float vehicle_land_detected::alt_max_() const
{
    return m_alt_max_;
}

/*!
 * @brief This function returns a reference to member alt_max_
 * @return Reference to member alt_max_
 */
float& vehicle_land_detected::alt_max_()
{
    return m_alt_max_;
}

/*!
 * @brief This function sets a value in member freefall_
 * @param _freefall_ New value for member freefall_
 */
void vehicle_land_detected::freefall_(bool _freefall_)
{
m_freefall_ = _freefall_;
}

/*!
 * @brief This function returns the value of member freefall_
 * @return Value of member freefall_
 */
bool vehicle_land_detected::freefall_() const
{
    return m_freefall_;
}

/*!
 * @brief This function returns a reference to member freefall_
 * @return Reference to member freefall_
 */
bool& vehicle_land_detected::freefall_()
{
    return m_freefall_;
}

/*!
 * @brief This function sets a value in member ground_contact_
 * @param _ground_contact_ New value for member ground_contact_
 */
void vehicle_land_detected::ground_contact_(bool _ground_contact_)
{
m_ground_contact_ = _ground_contact_;
}

/*!
 * @brief This function returns the value of member ground_contact_
 * @return Value of member ground_contact_
 */
bool vehicle_land_detected::ground_contact_() const
{
    return m_ground_contact_;
}

/*!
 * @brief This function returns a reference to member ground_contact_
 * @return Reference to member ground_contact_
 */
bool& vehicle_land_detected::ground_contact_()
{
    return m_ground_contact_;
}

/*!
 * @brief This function sets a value in member maybe_landed_
 * @param _maybe_landed_ New value for member maybe_landed_
 */
void vehicle_land_detected::maybe_landed_(bool _maybe_landed_)
{
m_maybe_landed_ = _maybe_landed_;
}

/*!
 * @brief This function returns the value of member maybe_landed_
 * @return Value of member maybe_landed_
 */
bool vehicle_land_detected::maybe_landed_() const
{
    return m_maybe_landed_;
}

/*!
 * @brief This function returns a reference to member maybe_landed_
 * @return Reference to member maybe_landed_
 */
bool& vehicle_land_detected::maybe_landed_()
{
    return m_maybe_landed_;
}

/*!
 * @brief This function sets a value in member landed_
 * @param _landed_ New value for member landed_
 */
void vehicle_land_detected::landed_(bool _landed_)
{
m_landed_ = _landed_;
}

/*!
 * @brief This function returns the value of member landed_
 * @return Value of member landed_
 */
bool vehicle_land_detected::landed_() const
{
    return m_landed_;
}

/*!
 * @brief This function returns a reference to member landed_
 * @return Reference to member landed_
 */
bool& vehicle_land_detected::landed_()
{
    return m_landed_;
}

/*!
 * @brief This function sets a value in member in_ground_effect_
 * @param _in_ground_effect_ New value for member in_ground_effect_
 */
void vehicle_land_detected::in_ground_effect_(bool _in_ground_effect_)
{
m_in_ground_effect_ = _in_ground_effect_;
}

/*!
 * @brief This function returns the value of member in_ground_effect_
 * @return Value of member in_ground_effect_
 */
bool vehicle_land_detected::in_ground_effect_() const
{
    return m_in_ground_effect_;
}

/*!
 * @brief This function returns a reference to member in_ground_effect_
 * @return Reference to member in_ground_effect_
 */
bool& vehicle_land_detected::in_ground_effect_()
{
    return m_in_ground_effect_;
}

/*!
 * @brief This function sets a value in member in_descend_
 * @param _in_descend_ New value for member in_descend_
 */
void vehicle_land_detected::in_descend_(bool _in_descend_)
{
m_in_descend_ = _in_descend_;
}

/*!
 * @brief This function returns the value of member in_descend_
 * @return Value of member in_descend_
 */
bool vehicle_land_detected::in_descend_() const
{
    return m_in_descend_;
}

/*!
 * @brief This function returns a reference to member in_descend_
 * @return Reference to member in_descend_
 */
bool& vehicle_land_detected::in_descend_()
{
    return m_in_descend_;
}

/*!
 * @brief This function sets a value in member has_low_throttle_
 * @param _has_low_throttle_ New value for member has_low_throttle_
 */
void vehicle_land_detected::has_low_throttle_(bool _has_low_throttle_)
{
m_has_low_throttle_ = _has_low_throttle_;
}

/*!
 * @brief This function returns the value of member has_low_throttle_
 * @return Value of member has_low_throttle_
 */
bool vehicle_land_detected::has_low_throttle_() const
{
    return m_has_low_throttle_;
}

/*!
 * @brief This function returns a reference to member has_low_throttle_
 * @return Reference to member has_low_throttle_
 */
bool& vehicle_land_detected::has_low_throttle_()
{
    return m_has_low_throttle_;
}

/*!
 * @brief This function sets a value in member vertical_movement_
 * @param _vertical_movement_ New value for member vertical_movement_
 */
void vehicle_land_detected::vertical_movement_(bool _vertical_movement_)
{
m_vertical_movement_ = _vertical_movement_;
}

/*!
 * @brief This function returns the value of member vertical_movement_
 * @return Value of member vertical_movement_
 */
bool vehicle_land_detected::vertical_movement_() const
{
    return m_vertical_movement_;
}

/*!
 * @brief This function returns a reference to member vertical_movement_
 * @return Reference to member vertical_movement_
 */
bool& vehicle_land_detected::vertical_movement_()
{
    return m_vertical_movement_;
}

/*!
 * @brief This function sets a value in member horizontal_movement_
 * @param _horizontal_movement_ New value for member horizontal_movement_
 */
void vehicle_land_detected::horizontal_movement_(bool _horizontal_movement_)
{
m_horizontal_movement_ = _horizontal_movement_;
}

/*!
 * @brief This function returns the value of member horizontal_movement_
 * @return Value of member horizontal_movement_
 */
bool vehicle_land_detected::horizontal_movement_() const
{
    return m_horizontal_movement_;
}

/*!
 * @brief This function returns a reference to member horizontal_movement_
 * @return Reference to member horizontal_movement_
 */
bool& vehicle_land_detected::horizontal_movement_()
{
    return m_horizontal_movement_;
}

/*!
 * @brief This function sets a value in member close_to_ground_or_skipped_check_
 * @param _close_to_ground_or_skipped_check_ New value for member close_to_ground_or_skipped_check_
 */
void vehicle_land_detected::close_to_ground_or_skipped_check_(bool _close_to_ground_or_skipped_check_)
{
m_close_to_ground_or_skipped_check_ = _close_to_ground_or_skipped_check_;
}

/*!
 * @brief This function returns the value of member close_to_ground_or_skipped_check_
 * @return Value of member close_to_ground_or_skipped_check_
 */
bool vehicle_land_detected::close_to_ground_or_skipped_check_() const
{
    return m_close_to_ground_or_skipped_check_;
}

/*!
 * @brief This function returns a reference to member close_to_ground_or_skipped_check_
 * @return Reference to member close_to_ground_or_skipped_check_
 */
bool& vehicle_land_detected::close_to_ground_or_skipped_check_()
{
    return m_close_to_ground_or_skipped_check_;
}


size_t vehicle_land_detected::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
    size_t current_align = current_alignment;















    return current_align;
}

bool vehicle_land_detected::isKeyDefined()
{
   return false;
}

void vehicle_land_detected::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
    (void) scdr;
     
     
     
     
     
     
     
     
     
     
     
     
}
