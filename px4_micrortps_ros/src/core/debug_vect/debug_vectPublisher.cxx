// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file debug_vectPublisher.cpp
 * This file contains the implementation of the publisher functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastrtps/participant/Participant.h>
#include <fastrtps/attributes/ParticipantAttributes.h>
#include <fastrtps/publisher/Publisher.h>
#include <fastrtps/attributes/PublisherAttributes.h>

#include <fastrtps/Domain.h>

#include <thread>
#include <chrono>

#include "debug_vectPublisher.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

debug_vectPublisher::debug_vectPublisher() : mp_participant(nullptr), mp_publisher(nullptr) {}

debug_vectPublisher::~debug_vectPublisher() {	Domain::removeParticipant(mp_participant);}

bool debug_vectPublisher::init()
{
    // Create RTPSParticipant

    ParticipantAttributes PParam;
    PParam.rtps.setName("Participant_publisher");  //You can put here the name you want
    mp_participant = Domain::createParticipant(PParam);
    if(mp_participant == nullptr)
    {
        return false;
    }

    //Register the type

    Domain::registerType(mp_participant, static_cast<TopicDataType*>(&myType));

    // Create Publisher

    PublisherAttributes Wparam;
    Wparam.topic.topicKind = NO_KEY;
    Wparam.topic.topicDataType = myType.getName();  //This type MUST be registered
    Wparam.topic.topicName = "debug_vectPubSubTopic";

    mp_publisher = Domain::createPublisher(mp_participant,Wparam,static_cast<PublisherListener*>(&m_listener));

    if(mp_publisher == nullptr)
    {
        return false;
    }

    std::cout << "Publisher created, waiting for Subscribers." << std::endl;
    return true;
}

void debug_vectPublisher::PubListener::onPublicationMatched(Publisher* pub,MatchingInfo& info)
{
    (void)pub;

    if (info.status == MATCHED_MATCHING)
    {
        n_matched++;
        std::cout << "debug vect Publisher matched" << std::endl;
    }
    else
    {
        n_matched--;
        std::cout << "debug vect Publisher unmatched" << std::endl;
    }
}

void debug_vectPublisher::run(const px4_msgs::DebugVect& input)
{
    debug_vect st;

    st.timestamp_(input.timestamp);

    std::array<char, 10> name = { input.name[0], input.name[1], input.name[2], input.name[3], input.name[4], input.name[5], input.name[6], input.name[7], input.name[8], input.name[9] };
    st.name(name);

    st.x_(input.x);
    st.y_(input.y);
    st.z_(input.z);

    mp_publisher->write(&st);
}
