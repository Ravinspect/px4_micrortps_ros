// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file vehicle_land_detected.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _VEHICLE_LAND_DETECTED_H_
#define _VEHICLE_LAND_DETECTED_H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(vehicle_land_detected_SOURCE)
#define vehicle_land_detected_DllAPI __declspec( dllexport )
#else
#define vehicle_land_detected_DllAPI __declspec( dllimport )
#endif // vehicle_land_detected_SOURCE
#else
#define vehicle_land_detected_DllAPI
#endif
#else
#define vehicle_land_detected_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}


/*!
 * @brief This class represents the structure vehicle_land_detected defined by the user in the IDL file.
 * @ingroup VEHICLE_LAND_DETECTED
 */
class vehicle_land_detected
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport vehicle_land_detected();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~vehicle_land_detected();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object vehicle_land_detected that will be copied.
     */
    eProsima_user_DllExport vehicle_land_detected(const vehicle_land_detected &x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object vehicle_land_detected that will be copied.
     */
    eProsima_user_DllExport vehicle_land_detected(vehicle_land_detected &&x);

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object vehicle_land_detected that will be copied.
     */
    eProsima_user_DllExport vehicle_land_detected& operator=(const vehicle_land_detected &x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object vehicle_land_detected that will be copied.
     */
    eProsima_user_DllExport vehicle_land_detected& operator=(vehicle_land_detected &&x);

    /*!
     * @brief This function sets a value in member timestamp_
     * @param _timestamp_ New value for member timestamp_
     */
    eProsima_user_DllExport void timestamp_(uint64_t _timestamp_);

    /*!
     * @brief This function returns the value of member timestamp_
     * @return Value of member timestamp_
     */
    eProsima_user_DllExport uint64_t timestamp_() const;

    /*!
     * @brief This function returns a reference to member timestamp_
     * @return Reference to member timestamp_
     */
    eProsima_user_DllExport uint64_t& timestamp_();

    /*!
     * @brief This function sets a value in member alt_max_
     * @param _alt_max_ New value for member alt_max_
     */
    eProsima_user_DllExport void alt_max_(float _alt_max_);

    /*!
     * @brief This function returns the value of member alt_max_
     * @return Value of member alt_max_
     */
    eProsima_user_DllExport float alt_max_() const;

    /*!
     * @brief This function returns a reference to member alt_max_
     * @return Reference to member alt_max_
     */
    eProsima_user_DllExport float& alt_max_();

    /*!
     * @brief This function sets a value in member freefall_
     * @param _freefall_ New value for member freefall_
     */
    eProsima_user_DllExport void freefall_(bool _freefall_);

    /*!
     * @brief This function returns the value of member freefall_
     * @return Value of member freefall_
     */
    eProsima_user_DllExport bool freefall_() const;

    /*!
     * @brief This function returns a reference to member freefall_
     * @return Reference to member freefall_
     */
    eProsima_user_DllExport bool& freefall_();

    /*!
     * @brief This function sets a value in member ground_contact_
     * @param _ground_contact_ New value for member ground_contact_
     */
    eProsima_user_DllExport void ground_contact_(bool _ground_contact_);

    /*!
     * @brief This function returns the value of member ground_contact_
     * @return Value of member ground_contact_
     */
    eProsima_user_DllExport bool ground_contact_() const;

    /*!
     * @brief This function returns a reference to member ground_contact_
     * @return Reference to member ground_contact_
     */
    eProsima_user_DllExport bool& ground_contact_();

    /*!
     * @brief This function sets a value in member maybe_landed_
     * @param _maybe_landed_ New value for member maybe_landed_
     */
    eProsima_user_DllExport void maybe_landed_(bool _maybe_landed_);

    /*!
     * @brief This function returns the value of member maybe_landed_
     * @return Value of member maybe_landed_
     */
    eProsima_user_DllExport bool maybe_landed_() const;

    /*!
     * @brief This function returns a reference to member maybe_landed_
     * @return Reference to member maybe_landed_
     */
    eProsima_user_DllExport bool& maybe_landed_();

    /*!
     * @brief This function sets a value in member landed_
     * @param _landed_ New value for member landed_
     */
    eProsima_user_DllExport void landed_(bool _landed_);

    /*!
     * @brief This function returns the value of member landed_
     * @return Value of member landed_
     */
    eProsima_user_DllExport bool landed_() const;

    /*!
     * @brief This function returns a reference to member landed_
     * @return Reference to member landed_
     */
    eProsima_user_DllExport bool& landed_();

    /*!
     * @brief This function sets a value in member in_ground_effect_
     * @param _in_ground_effect_ New value for member in_ground_effect_
     */
    eProsima_user_DllExport void in_ground_effect_(bool _in_ground_effect_);

    /*!
     * @brief This function returns the value of member in_ground_effect_
     * @return Value of member in_ground_effect_
     */
    eProsima_user_DllExport bool in_ground_effect_() const;

    /*!
     * @brief This function returns a reference to member in_ground_effect_
     * @return Reference to member in_ground_effect_
     */
    eProsima_user_DllExport bool& in_ground_effect_();

    /*!
     * @brief This function sets a value in member in_descend_
     * @param _in_descend_ New value for member in_descend_
     */
    eProsima_user_DllExport void in_descend_(bool _in_descend_);

    /*!
     * @brief This function returns the value of member in_descend_
     * @return Value of member in_descend_
     */
    eProsima_user_DllExport bool in_descend_() const;

    /*!
     * @brief This function returns a reference to member in_descend_
     * @return Reference to member in_descend_
     */
    eProsima_user_DllExport bool& in_descend_();

    /*!
     * @brief This function sets a value in member has_low_throttle_
     * @param _has_low_throttle_ New value for member has_low_throttle_
     */
    eProsima_user_DllExport void has_low_throttle_(bool _has_low_throttle_);

    /*!
     * @brief This function returns the value of member has_low_throttle_
     * @return Value of member has_low_throttle_
     */
    eProsima_user_DllExport bool has_low_throttle_() const;

    /*!
     * @brief This function returns a reference to member has_low_throttle_
     * @return Reference to member has_low_throttle_
     */
    eProsima_user_DllExport bool& has_low_throttle_();

    /*!
     * @brief This function sets a value in member vertical_movement_
     * @param _vertical_movement_ New value for member vertical_movement_
     */
    eProsima_user_DllExport void vertical_movement_(bool _vertical_movement_);

    /*!
     * @brief This function returns the value of member vertical_movement_
     * @return Value of member vertical_movement_
     */
    eProsima_user_DllExport bool vertical_movement_() const;

    /*!
     * @brief This function returns a reference to member vertical_movement_
     * @return Reference to member vertical_movement_
     */
    eProsima_user_DllExport bool& vertical_movement_();

    /*!
     * @brief This function sets a value in member horizontal_movement_
     * @param _horizontal_movement_ New value for member horizontal_movement_
     */
    eProsima_user_DllExport void horizontal_movement_(bool _horizontal_movement_);

    /*!
     * @brief This function returns the value of member horizontal_movement_
     * @return Value of member horizontal_movement_
     */
    eProsima_user_DllExport bool horizontal_movement_() const;

    /*!
     * @brief This function returns a reference to member horizontal_movement_
     * @return Reference to member horizontal_movement_
     */
    eProsima_user_DllExport bool& horizontal_movement_();

    /*!
     * @brief This function sets a value in member close_to_ground_or_skipped_check_
     * @param _close_to_ground_or_skipped_check_ New value for member close_to_ground_or_skipped_check_
     */
    eProsima_user_DllExport void close_to_ground_or_skipped_check_(bool _close_to_ground_or_skipped_check_);

    /*!
     * @brief This function returns the value of member close_to_ground_or_skipped_check_
     * @return Value of member close_to_ground_or_skipped_check_
     */
    eProsima_user_DllExport bool close_to_ground_or_skipped_check_() const;

    /*!
     * @brief This function returns a reference to member close_to_ground_or_skipped_check_
     * @return Reference to member close_to_ground_or_skipped_check_
     */
    eProsima_user_DllExport bool& close_to_ground_or_skipped_check_();


    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const vehicle_land_detected& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

private:
    uint64_t m_timestamp_;
    float m_alt_max_;
    bool m_freefall_;
    bool m_ground_contact_;
    bool m_maybe_landed_;
    bool m_landed_;
    bool m_in_ground_effect_;
    bool m_in_descend_;
    bool m_has_low_throttle_;
    bool m_vertical_movement_;
    bool m_horizontal_movement_;
    bool m_close_to_ground_or_skipped_check_;
};

#endif // _VEHICLE_LAND_DETECTED_H_